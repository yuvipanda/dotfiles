#!/bin/bash -l

# Tiny venv wrapper that does *exactly* what I want
# 1. Put venvs in a central location, based on name of
#    current directory. I put all my code under ~/code,
#    so this works for me.
# 2. If a venv doesn't exist for the current directory,
#    create and activate it.
# 3. If a venv does exist, just activate it.
#
# You can get out of it with the venv standard `deactivate`
set -euo pipefail

VENV_NAME=$(basename $(pwd))
VENV_BASE_DIR=${HOME}/.local/share/virtualenvs
VENV_PATH=${VENV_BASE_DIR}/${VENV_NAME}
# Lets me use multiple python versions if homebrew is set up for it!
VENV_VERSION=${PYTHON_VERSION:-13}

if [ ! -f ${VENV_PATH}/bin/python ]; then
    python3.${VENV_VERSION} -m venv ${VENV_PATH}
    # Install some common dev packages I want in all my virtualenvs, primarily
    # about code formatting & lsp
    ${VENV_PATH}/bin/pip install "python-lsp-server[all]" black pylsp-mypy python-lsp-black pyls-isort pylsp-rope

fi

source ${VENV_PATH}/bin/activate

# Login shells should never have `-e` set, otherwise they
# will die every time you have an interactive command
# that has a non-zero exit code
set +euo pipefail
